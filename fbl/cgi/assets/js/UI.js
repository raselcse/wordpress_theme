/**	(c) copyright by devn.co - All Rights Reserved.*/var doc = document;var widget_id = 0;function ID( id , parent ){	if(!parent)return document.getElementById( id );	if(parent>0){		var elm = document.getElementById( id );		while(parent-->0)elm=elm.parentNode;		return elm;	}};var currentHeight = 0;var minHeight = 600;function heightable(){		if( ID('container').offsetHeight > minHeight ){		minHeight = ID('container').offsetHeight+100;		ID('container').style.minHeight = minHeight+'px';	};		if( currentHeight == document.body.offsetHeight)return;		currentHeight = document.body.offsetHeight;	jQuery('#available-widgets,#positionSettings,#listPages').height(currentHeight-40);	};setInterval('heightable()',1000);jQuery(document).ready(function() {		jQuery('#widgets-left').tabs();	jQuery('#listPages').accordion({		collapsible: true,		heightStyle: "content",	}); 	jQuery('#listPages edit, #use-global-layout').live('click', function(e){		if( this.nodeName == 'EDIT' ){			var cl = 'currently_editting';			if( this.id == cl )				return;			e.stopImmediatePropagation();						ID(cl).id='';						this.id = cl;			var name = this.className;			var alias = this.parentNode.innerText;			var task = '';					}else{			if( !confirm("ARE YOU SURE?\n\nThis layout will be remove and this page will use global layout") )return;			var name = 'sys-layout-home';			var alias = ID('currently_editting').className;			var task = 'clearLayout';		}					ID('container').innerHTML = '<center><br /><br /><span class="loading-eff">Loading...</span></center>';				doc.title = 'Loading...';				jQuery.post( ajaxurl , {				'action' : 'loadLayout' ,  				'name' : name , 				'alias' : alias,				'task' : task			} ,				function(result){ 									ID('container').innerHTML = result;					doc.title = 'Loaded - DEVN Theme settings';					re_init(jQuery);					ds.layout.resetValSpan();				});			});		ds.layout.resetValSpan();	});window.onload = function(){	re_init(jQuery);	jQuery('#wpadminbar').remove();	jQuery('#wpfooter').remove();	jQuery('#adminmenuwrap').remove();	jQuery('#adminmenuback').remove();	jQuery('#screen-meta').remove();	jQuery('.ajax-feedback').each(function(){		this.src = uri+'img/loading.gif';	});};document.onclick = function( event ){	var y = !document.all ? event.clientY : event.clientY;	var x = !document.all ? event.clientX : event.clientX;	var target = document.elementFromPoint( x , y );		if( !target )return;		if( target.className == 'widget-inside' )	{		//wpWidgets.close( jQuery(target).closest('div.widget') );	};		if( target.className == 'float-right icon icon-x' ){		ds.position.onCloseBox(target);	};		if( target.className == 'sidebar-name-arrow settings-position' ){		ds.position.edit(target);	};			/*if( target.className == 'sidebar-name-arrow remove-position' ){		if( confirm('Are you sure?') ){						ds.position.remove( target.parentNode.parentNode.parentNode );					}	};*/		if( target.className == 'sidebar-name-arrow expand-position' ){		ds.position.expand( target );	};		if( target.className == 'ui-icon ui-icon-close tag-remove'){		ds.position.inv_remove( target );	};		};var ds = {	create : {		drag : {					container : function( event , elm , cols ){								$T( elm ).setOffsetPage();								var c = ds.coo( event , elm );								if( doc.elementFromPoint( c.xp , c.yp ) != elm )					return;				var o = ds.create.wrp( c.x , cols );								elm.appendChild( o.row );								this.containerFixSize( event , elm , cols , c , o );			},			wrp : function( event , elm ){							$T( '#container' ).setOffsetPage();								var c = ds.coo( event , doc.getElementById('container') );				var o = ds.create.wrp( c.x , 0 );								o.row = o.wrp;				elm.parentNode.insertBefore( o.wrp , elm );								var cols = 0;				var colsLeft = 0;				var colsRight = 0;				var prev = o.wrp,next = o.wrp;								while( prev = jQuery(prev).prev().get(0) ){					if( prev.className == 'offset_1' )					{						cols++;						colsLeft++;					}else break;					};				while( next = jQuery(next).next().get(0) ){					if( next.className == 'offset_1' )					{						cols++;						colsRight++;					}else break;					};				/*doc.title = ' - left:'+colsLeft+' - right'+colsRight+' - cols:'+cols;*/				this.wrpFixSize( event , elm , cols , c , o , colsLeft , colsRight );								},			wrpFixSize : function( event , elm , cols , c , o , colsLeft , colsRight ){				jQuery( "body" ).disableSelection();								doc.getElementById('container').onmousemove = function( event ){										c2 = ds.coo( event , doc.getElementById('container') );										if( c2.x > c.x-40 )					{						var cur = Math.abs( Math.ceil((c2.x - c.x)/80) );						if( cur > colsRight ) cur = colsRight;												o.wrp.className = 'span span'+cur;						o.wrp.span = cur;							ds.setOffset( colsLeft , o.wrp , 'left' );						ds.setOffset( ( colsRight - cur ) , o.wrp , 'right' );																	}else{						var cur = Math.abs( Math.floor((c2.x - c.x)/80) );												if( cur > colsLeft ) cur = colsLeft;												o.wrp.className = 'span span'+cur;						o.wrp.span = cur;						ds.setOffset( ( colsLeft - cur ) , o.wrp , 'left' );						ds.setOffset( ( colsRight ) , o.wrp , 'right' );					};									};								doc.onmouseup = function(){									doc.getElementById('container').onmousemove = null;					doc.onmouseup = null;					jQuery( "body" ).enableSelection();										ds.create.fixAgain( o.wrp );										if( o.wrp.className != 'span span0' )						ds.position.addNew( o.wrp );					/*Enter new name for position*/				};						},			containerFixSize : function( event , elm , cols , c , o ){								jQuery( "body" ).disableSelection();								doc.getElementById('container').onmousemove = function( event ){									c2 = ds.coo( event , doc.getElementById('container') );										if( c2.x > c.x-40 )					{						var cur = Math.abs( Math.ceil((c2.x - c.x)/80) );						if( cur > cols - o.ofst ) cur = cols - o.ofst;												o.wrp.className = 'span span'+cur;						o.wrp.span = cur;							ds.setOffset( o.ofst , o.wrp , 'left' );						ds.setOffset( (cols - ( o.ofst + cur )) , o.wrp , 'right' );																	}else{												var cur = Math.abs( Math.floor((c2.x - c.x)/80) );												if( cur - 1 > o.ofst ) cur = o.ofst + 1;												o.wrp.className = 'span span'+cur;						o.wrp.span = cur;						ds.setOffset( ( o.ofst - cur +1 ) , o.wrp , 'left' );						ds.setOffset( ( cols - 1 - o.ofst ) , o.wrp , 'right' );					};				};				doc.onmouseup = function(){									doc.getElementById('container').onmousemove = null;					doc.onmouseup = null;					jQuery( "body" ).enableSelection();										ds.create.fixAgain( o.wrp );										if( o.wrp.className != 'span span0' )						ds.position.addNew( o.wrp );					/*Enter new name for position*/				};							}		},		wrp : function( x , c/*cols*/ ){						var prv = Math.floor(x/80);						var div = doc.createElement('div');			var offsetPrev = '',offsetNext = '';			for(var i=0; i<prv; i++)offsetPrev+='<div class="offset_1"></div>';			for(var i=0; i<c-prv; i++)offsetNext+='<div class="offset_1"></div>';						div.className = "row";						var wg = '<div class="span0">'+ds.create.widget('position-untitled','Position Untitled')+'</div>';						var sortHandle = '<div class="rowSortHandle" title="Sortable rows"></div>';						div.innerHTML = sortHandle + offsetPrev + wg + offsetNext;						var span = jQuery(div).children('.span0').get(0);						if( c>0 ){				ds.setOffset( prv , span , 'left' );				ds.setOffset( (c-prv) , span , 'right' );			};						return { row : div , widget : wg  , wrp : span , ofst: prv };					},		widget : function( id , name ){					var str = '<div class="widgets-holder-wrap">'+						'<div class="sidebar-name">'+							'<div title="Collapse/expand widgets" class="sidebar-name-arrow expand-position"><br></div>'+							'<div title="Settings this position" class="sidebar-name-arrow settings-position"><br></div>'+							'<!--div class="sidebar-name-arrow remove-position"><br></div-->'+							'<h3><span class="position-name">'+name+'</span><span><img alt="" title="" class="ajax-feedback" src=""></span></h3></div>'+															'<div class="widgets-sortables ui-sortable" id="'+id+'" style="min-height: 50px;">'+							'<div class="sidebar-description">'+								'<p class="description">Drag module here</p>'+								'</div><div class="resizeble-left" title="Resize position"></div>'+								'<div class="resizeble-right" title="Resize position"></div>'+								'<settings></settings>'+							'</div>'+							'</div>';			return str;			},		fixAgain : function( span ){					if( span.className == 'span span0' ){				span.parentNode.parentNode.removeChild(span.parentNode);				/*remove the sidebar no with span0*/				return;			};										re_init(jQuery);			/*Re setup sortable*/						row = span.parentNode;			var total = 0;			var maxHeight = span.offsetHeight;			var spanxs = row.querySelectorAll('div');			for(var i=0; i< spanxs.length; i++){				if( total < 12 && spanxs[i].parentNode == row ){									if( parseInt( spanxs[i].className.replace('span span','') ) > 0 ){						spanxs[i].span = parseInt( spanxs[i].className.replace('span span','') );						total += spanxs[i].span;						if( spanxs[i].offsetHeight > maxHeight )							maxHeight = spanxs[i].offsetHeight;					}					else if( spanxs[i].className == 'offset_1'  )					{						total++;						spanxs[i].offset = 1;					};					}else if( spanxs[i].className == 'offset_1' ){					spanxs[i].className = 'offset_0';					spanxs[i].offset = 0;				}			};						if( total < 12 ){							var oft = jQuery( row ).children('div.offset_0');				var l = oft.length;				var of = null;				for( var i=total;i<12;i++){					of = oft.get(--l);					if(of){						of.className = 'offset_1';						of.offset = 1;					};					};						};						if( maxHeight > 0 )			{				jQuery( row ).children('div.offset_1').height( maxHeight );			};			/*			var span0 = ID('container').querySelectorAll('.span0');			for( var i=0; i<span0.length; i++ )				span0[i].parentNode.removeChild(span0[i]);			*/			jQuery('#widgets-left').tabs({selected:1});					}	},	resize : {			right : function( event , el ){						var elm = el;						jQuery( "body" ).disableSelection();						$T( elm ).setOffsetPage();						var c = ds.coo( event , elm );						doc.getElementById('container').onmousemove = function( event ){							var c2 = ds.coo( event , elm );				var wrp = elm.parentNode.parentNode;								if( c.x - c2.x > 78 )				{					/* -1 to left */					if( ds.resize.rightTest( wrp , 0 ) ) 						c.x -= 80;										}else if( c2.x - c.x > 78 )				{					/* +1 to right */										if( ds.resize.rightTest( wrp , 1 ) ) 						c.x += 80;								};							};						doc.onmouseup = function(){				doc.getElementById('container').onmousemove = null;				doc.onmouseup = null;				jQuery( "body" ).enableSelection();				ds.create.fixAgain( elm.parentNode.parentNode );								ds.layout.save();				/*auto save*/						};						},		rightTest : function( elm , mode ){						var ofs = this.getNextOffset( elm , mode);						if( mode == 1 )			{				if( ofs ){					ofs.className = 'offset_0';					ofs.offset = 0;					elm.className = 'span span'+( ++elm.span );					return true;				}else return false;			}else{				if( ofs && elm.span >1 ){					ofs.className = 'offset_1';					ofs.offset = 1;					elm.className = 'span span'+( --elm.span );					return true;				};				if( !ofs && elm.span > 1 ){					ofs = this.getOneNextOffset( elm , 0 );					if( ofs ){						ofs.className = 'offset_1';						ofs.offset = 1;						elm.className = 'span span'+( --elm.span );						elm.parentNode.insertBefore( ofs , jQuery(elm).next().get(0) );						return true;					}else return false;					};			};				},		left : function( event , el ){						var elm = el;						jQuery( "body" ).disableSelection();						$T( elm ).setOffsetPage();						var c = ds.coo( event , elm );						doc.getElementById('container').onmousemove = function( event ){							var c2 = ds.coo( event , elm );				var wrp = elm.parentNode.parentNode;								if( c.x - c2.x > 78 )				{					/* +1 to left */										if( ds.resize.leftTest( wrp , 1 ) ) c.x -= 80;										}else if( c2.x - c.x > 78 )				{					/* -1 to right */										if( ds.resize.leftTest( wrp , 0 ) ) c.x += 80;								};							};						doc.onmouseup = function(){				doc.getElementById('container').onmousemove = null;				doc.onmouseup = null;				jQuery( "body" ).enableSelection();				ds.create.fixAgain( elm.parentNode.parentNode );								ds.layout.save();				/*auto save*/						};						},		leftTest : function( elm , mode ){						var ofs = this.getPrevOffset( elm , mode);						if( mode == 1 )			{				if( ofs ){					ofs.className = 'offset_0';					ofs.offset = 0;					elm.className = 'span span'+( ++elm.span );					return true;				}else return false;			}else{				if( ofs && elm.span >1 ){					ofs.className = 'offset_1';					ofs.offset = 1;					elm.className = 'span span'+( --elm.span );					return true;				};				if( !ofs && elm.span > 1 ){					ofs = this.getOneNextOffset( elm , 0 );					if( ofs ){						ofs.className = 'offset_1';						ofs.offset = 1;						elm.className = 'span span'+( --elm.span );						elm.parentNode.insertBefore( ofs , elm );						return true;					}else return false;					};			};				},		getPrevOffset : function( elm , mode ){						while( elm = jQuery(elm).prev().get(0) ){				if( elm.className != 'offset_1' && elm.className != 'offset_0'  )					return false;				if( elm.className == 'offset_'+mode )					return elm;			};			return false;					},				getNextOffset : function( elm , mode ){						var found = true;			var nextElm = elm;			while( nextElm = jQuery(nextElm).next().get(0) ){				if( nextElm.className == 'offset_'+mode )					return nextElm;				else found = false;				};						/*if no offset_%mode% at right, we'll move an offset_%mode% from left to right */			if( !found )			{				var elmPrev = this.getOnePrevOffset( elm, mode );				if( elmPrev )				{					elmPrev.className = 'offset_'+(mode?0:1);					elm.parentNode.insertBefore( elm, elmPrev );					return elmPrev;				}			};						return false;					},		getOneNextOffset : function( elm , mode ){						while( elm = jQuery(elm).next().get(0) ){				if( elm.className == 'offset_'+mode )					return elm;			};			return false;					},		getOnePrevOffset : function( elm , mode ){						while( elm = jQuery(elm).prev().get(0) ){							if( elm.className == 'offset_'+mode )					return elm;			};			return false;					}			},	setOffset : function( amount , elm , direct ){			var curA = 0;		var prev=elm,next=elm;				if( direct == 'left' )		{			while( prev = jQuery(prev).prev().get(0) ){				if( prev.className.indexOf('offset_') > -1 )				{					if( curA++ < amount )var oft = 1; else oft = 0;						prev.offset = oft;					prev.className = 'offset_'+oft;				}else break;				};		}else{			while( next = jQuery(next).next().get(0) ){				if( next.className.indexOf('offset_') > -1  )				{					if( curA++ < amount )var oft = 1; else oft = 0;						next.offset = oft;					next.className = 'offset_'+oft;				}else break;			};		};			},	coo : function( event , elm ){			var Return = {};				Return.yp = !document.all ? event.clientY : event.clientY;		Return.xp = !document.all ? event.clientX : event.clientX;				Return.x = Return.xp - elm.pageLeft - $T('core').fn.getScroll().left;		Return.y = Return.yp - elm.pageTop - $T('core').fn.getScroll().top;				return Return;			},	layout : {			save : function(){			var name = ID('currently_editting').className,id=null,sid=null,sclass=null,parent=null,offset0=null,offset1=null,first=null,rowStack=[],row=[],				layout = ID('container'),				rows = layout.querySelectorAll('.row');							for( var i=0; i<rows.length; i++ ){				if( rows[i].querySelector('.span') )				{						first = rows[i].querySelector('div');					ccount = 1;					do{											if( first.className.indexOf('span span') > -1 ){							id = first.querySelector('.widgets-sortables');							sid = first.querySelector('settings').id;							sclass = first.querySelector('settings').className;							row.push('{"s":"'+first.className.replace('span span','')+'","p":"'+id.id+'","id":"'+sid+'","class":"'+sclass+'","expand":"'+id.parentNode.className.replace('widgets-holder-wrap ','')+'"}');							}else if(first.className=='offset_1'||first.className=='offset_0'){							row.push('{"s":"'+first.className.replace('offset_','')+'"}');						};					}while( first = jQuery(first).next().get(0) );										for( var j=0; j<row.length; j++ ){											};										rowStack.push('['+row.toString()+']');					row = [];				}			};							doc.title = 'Saving...';						jQuery.post( ajaxurl , {				'action' : 'saveLayout' , 				'layout' : '['+rowStack.toString()+']' , 				'name' : name  } , 				function(result){ 									doc.title = 'Saved - 9DS Theme settings'; 									} );							wpWidgets.saveOrder();			},		resetValSpan : function(){			jQuery('#container .row').each(function(){				var firstElm = this.querySelector('div');				do{									if( firstElm.className.indexOf('offset_') > -1 )						firstElm.offset = parseInt(firstElm.className.replace('offset_',''));					else if( firstElm.className.indexOf('span span') > -1 )						firstElm.span = parseInt(firstElm.className.replace('span span',''));										}while( firstElm = jQuery(firstElm).next().get(0) );			});		}	},	position : {			list : function(){					var al = ID('list-inactive-position').querySelectorAll('.widgets-sortables');			var ul = ID('left-ul-list-inactive-position');			ul.innerHTML = '';			if( al.length > 0 ){				var h3 = document.createElement('h3');				h3.innerHTML = ' &nbsp; &nbsp;  Available Widgets';				ul.appendChild(h3);				for(var i=0; i<al.length; i++)				{					li = document.createElement('li');					li.innerHTML = '<span class="ui-icon ui-icon-extlink"></span>'+al[i].id+'<remove id="remove-'+al[i].id+'" class="ui-icon ui-icon-close tag-remove"></remove>'					ul.appendChild(li);				}				}else{				var h3 = document.createElement('li');				h3.innerHTML = 'No Widget available';				ul.appendChild(h3);			}					},		addNew : function( span ){						var id = span.querySelector('.widgets-sortables').id;						setTimeout("jQuery('#position-settings').show()",100);						ID('positions-list-wrp').innerHTML = this.buildSelect( id );			ID('psname').disabled = false;			ID('psname').style.opacity = 1;			doc.crt = { s : span , i : id };			ID('psname').value = '';					},		edit : function( elm ){						jQuery('#container .cureditting').removeClass('cureditting');						jQuery(elm.parentNode).addClass('cureditting');						var id = elm.parentNode.parentNode.querySelector('.widgets-sortables').id;			jQuery('#widgets-left').tabs({selected:2});			ID('positions-list-edit-wrp').innerHTML = this.buildSelect( id );						doc.crt = { s : elm.parentNode.parentNode.parentNode , i : id };						var stt = doc.crt.s.querySelector('settings');			ID('lpsclass').value = stt.className;						ID('position-settings-ul').style.display = 'block';					this.list();					},		saveAddNew : function(){						var select = ID('positions-list-wrp').querySelector('select');						if( select.value == '' ){				if( ID('psname').value == '' || positions.join(",").indexOf(ID('psname').value+',') > -1 || ID(ID('psname').value.replace(/ /g,'-')) ) {					alert('Name entered  is exist');					ID('psname').focus();					return;				}else{									jQuery('#position-settings').hide();										var name = ID('psname').value;										doc.crt.s.querySelector('.position-name').innerHTML =  name;					doc.crt.s.querySelector('.widgets-sortables').id =  name.replace(/ /g,'-');					doc.crt.s.querySelector('settings').className = name.replace(/ /g,'-')+' sidebards';					ID('lpsclass').value = name.replace(/ /g,'-')+' sidebards';				}			}else{							jQuery('#position-settings').hide();				var span = doc.crt.s;								var nep = ID(select.value,1);				var sett = nep.querySelector('settings');				sett.className = select.value+' sidebards';								span.innerHTML = '';				span.appendChild(nep);				ID('lpsclass').value = select.value+' sidebards';			};						ds.layout.save();			/*auto save*/		},		checkName : function( inp ){					var ops = ID('positions-list-wrp').querySelector('select').options;			var j = 0;			for( var i=0; i<ops.length; i++ ){				if( ops[i].value == inp.value ){					ops[i].selected = true;					j = 1;				};				};			if( j == 0 )ops[0].selected = true;					},		del : function(){			if( confirm('Are you sure?') )this.remove( doc.crt.s );		},		remove : function( span ){						var wit = span.span,id = span.querySelector('.widgets-sortables').id,				chek = span.parentNode.querySelectorAll('div'),k=0,pposs=span.parentNode;						for(var i=0; i<chek.length; i++){				if( chek[i].span > 0 )k++;			}						if( k==1 ){							if( id != 'position-untitled' ){					ID('list-inactive-position').appendChild(span);				};				pposs.parentNode.removeChild( pposs );							}else{				var offs = pposs.querySelectorAll('div.offset_0');				for( k=0; k<wit; k++ ){					offs[k].offset = 1;					offs[k].className = 'offset_1';					pposs.insertBefore( offs[k] , span );				};								if( id != 'position-untitled' ){					ID('list-inactive-position').appendChild(span);				}else pposs.removeChild( span );			};						ID('position-settings-ul').style.display = 'none';			ds.position.list();			/*Back to list available positions*/			ds.layout.save();			/*auto save*/		},		inv_remove : function( elm ){						if( !confirm("BE CAREFUL!!!\n\nAre you sure you want to delete this sidebar? \nAll widgets and settings in this sidebar will be lost.") )return;						vid = elm.id.replace('remove-','');						elm.parentNode.parentNode.removeChild( elm.parentNode );						if( ID( vid , 1 ) )				ID( vid , 2 ).removeChild( ID( vid , 1 ) );						wpWidgets.saveOrder();		},		onSelectChange : function( sl ){			var name = ID('position-settings-body').querySelector('input');			if( sl.value == '' ){				name.disabled = false;				name.style.opacity = 1;			}else{				name.disabled = 'disabled';				name.style.opacity = 0.3;			};		},		onPositionChange : function( sl ){				var span = doc.crt.s;			var id = doc.crt.i;						if( id == 'position-untitled' )return this.onSelectChange(sl);			var select = ID('positions-list-edit-wrp').querySelector('select');						if( select.value == '' )return;						var sid = span.querySelector('.widgets-holder-wrap');			var nep = ID(select.value,1);			var sett = nep.querySelector('settings');			ID('lpsclass').value = sett.className;			span.appendChild(nep);			ID('list-inactive-position').appendChild(sid);			doc.crt.i = select.value;						ds.layout.save();			/*auto save*/					},		onPrexChange : function( inp ){					var sett = ID(doc.crt.i,1).querySelector('settings');			if( inp.id == 'lpsclass' )sett.className = inp.value;						ds.layout.save();			/*auto save*/			},		buildSelect : function( id ){					var select = '<select onchange="ds.position.onPositionChange(this)" style="width:201px;">';			if( id!='position-untitled' )select += '<option selected value="'+id+'">'+id+'</option>';			else select += '<option value=""> --- Select position ---</option>';			var pcur = ID('list-inactive-position').querySelectorAll('.widgets-sortables');			for(var i=0; i<pcur.length; i++){				select += '<option ';				if( pcur[i].id == id )select += ' selected ';				select += 'value="'+pcur[i].id+'">'+pcur[i].id+'</option>';			}			select += '</select>';			return select;					},		onCloseBox : function(){			jQuery('#position-settings').hide();			if( doc.crt.i == 'position-untitled' )				this.remove( doc.crt.s );		},		load : function( span , name ){			span.innerHTML = '<center><br /><br /><span class="loading-eff">Loading...</span></center>';			$T(span).ajax( ajaxurl ).post({ 'action' : 'loadPosition' , 'name' : name });		},		expand : function( elm ){					var wrp = elm.parentNode.parentNode;			if( wrp.className.indexOf('expand') == -1 )				wrp.className = 'widgets-holder-wrap expand';			else wrp.className = 'widgets-holder-wrap';						ds.layout.save();			/*auto save*/			}	}}